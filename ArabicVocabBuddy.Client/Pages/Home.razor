@page "/"
@using ArabicVocabBuddy.Models
@inject HttpClient Http
@inject IEnvironmentManager EnvironmentManager

<PageTitle>Arabic Vocab Buddy</PageTitle>

<h1>Arabic Vocab Buddy</h1>

<h2>The environment is @(EnvironmentManager.EnvironmentName).</h2>
<h2>The API base URL is @(EnvironmentManager.ApiBaseUrl).</h2>

@if (syllabus == null)
{
    <p><em>Loading from @(Http.BaseAddress)...</em></p>
}
else
{
    @foreach (var mySection in syllabus.Sections)
    {
        <div>
            <h2>Section @mySection.Number</h2>
            @foreach (var unit in mySection.Units)
            {
                <div>
                    <h3>Unit @unit.Number</h3>
                </div>
                <div>
                    <table>
                        @foreach (var vocabularyItem in @unit.Vocabulary)
                        {
                            <tr>
                                <td><button @onclick="() => DownloadAndPlay(vocabularyItem.Arabic)">@vocabularyItem.Arabic</button></td>
                                <td>@vocabularyItem.English</td>
                            </tr>
                        }
                    </table>
                </div>
            }
        </div>
    }
}

@code {
    private Syllabus? syllabus;

    private void DownloadAndPlay(string text)
    {
        Console.WriteLine($"Downloading and playing: {text}");
        /*if (IsPwaInstalled() && FileSystemApiAvailable())
        {
            if (await FileExistsOnDisk(fileName))
            {
                PlayFromDisk(fileName);
                return;
            }
        }
        else if (await FileExistsInCache(fileName))
        {
            PlayFromCache(fileName);
            return;
        }

        // Download file
        var fileBytes = await DownloadFile(fileUrl);

        if (IsPwaInstalled() && FileSystemApiAvailable())
        {
            await SaveFileToDisk(fileName, fileBytes);
            PlayFromDisk(fileName);
        }
        else
        {
            await SaveFileToCache(fileName, fileBytes);
            PlayFromCache(fileName);
        }*/
    }

    protected override async Task OnInitializedAsync()
    {
        if (Http.BaseAddress != new Uri("http://localhost:5025/api/"))
        {
            throw new InvalidOperationException("The HttpClient base address is not set to the expected API URL.");
        }
        syllabus = await Http.GetFromJsonAsync<Syllabus?>("Syllabus");
    }
}
